#include "object_geometry.hpp"

#include <catch2/catch_approx.hpp>
#include <catch2/catch_test_macros.hpp>

#include <sol/sol.hpp>
#include <spdlog/spdlog.h>

using namespace ccs;

TEST_CASE("sphere intersections")
{

    sol::state lua;
    lua.open_libraries(sol::lib::base, sol::lib::math);
    lua.script(R"(
            simulation = {
                mesh = {
                    index_extents = {21, 22, 23},
                    domain_bounds = {
                        min = {-1, -1, 0},
                        max = {1, 2, 2.2}
                    }
                },
                shapes = {
                    {
                        type = "sphere",
                        center = {0.01, -0.01, 0.5},
                        radius = 0.25
                    }
                }
            }
        )");
    auto shapes_opt = object_geometry::from_lua(lua["simulation"]);
    REQUIRE(!!shapes_opt);
    const auto& shapes = *shapes_opt;

    auto m_opt = cartesian::from_lua(lua["simulation"]);
    REQUIRE(!!m_opt);
    auto&& [n, domain] = *m_opt;

    object_geometry g{shapes, cartesian{n.extents, domain.min, domain.max}};

    // intersections in x from Mathematica
    SECTION("X")
    {
        std::vector<real3> exact = {{-0.0596346148968796, -0.14285714285714285, 0.3},
                                    {0.07963461489687962, -0.14285714285714285, 0.3},
                                    {-0.17667881398765306, -0.14285714285714285, 0.4},
                                    {0.19667881398765297, -0.14285714285714285, 0.4},
                                    {-0.20177577668807345, -0.14285714285714285, 0.5},
                                    {0.22177577668807347, -0.14285714285714285, 0.5},
                                    {-0.17667881398765306, -0.14285714285714285, 0.6},
                                    {0.19667881398765297, -0.14285714285714285, 0.6},
                                    {-0.0596346148968796, -0.14285714285714285, 0.7},
                                    {0.07963461489687962, -0.14285714285714285, 0.7},
                                    {-0.13966629547095766, 0., 0.3},
                                    {0.15966629547095756, 0., 0.3},
                                    {-0.2189104628451919, 0., 0.4},
                                    {0.2389104628451919, 0., 0.4},
                                    {-0.23979991993593586, 0., 0.5},
                                    {0.259799919935936, 0., 0.5},
                                    {-0.2189104628451919, 0., 0.6},
                                    {0.2389104628451919, 0., 0.6},
                                    {-0.13966629547095766, 0., 0.7},
                                    {0.15966629547095756, 0., 0.7},
                                    {-0.16068888035707252, 0.14285714285714285, 0.4},
                                    {0.18068888035707253, 0.14285714285714285, 0.4},
                                    {-0.18782490712130018, 0.14285714285714285, 0.5},
                                    {0.20782490712130008, 0.14285714285714285, 0.5},
                                    {-0.16068888035707252, 0.14285714285714285, 0.6},
                                    {0.18068888035707253, 0.14285714285714285, 0.6}};

        std::vector<int3> sc = {
            {10, 6, 3}, {10, 6, 3}, {9, 6, 4},  {11, 6, 4}, {8, 6, 5}, {12, 6, 5},
            {9, 6, 6},  {11, 6, 6}, {10, 6, 7}, {10, 6, 7}, {9, 7, 3}, {11, 7, 3},
            {8, 7, 4},  {12, 7, 4}, {8, 7, 5},  {12, 7, 5}, {8, 7, 6}, {12, 7, 6},
            {9, 7, 7},  {11, 7, 7}, {9, 8, 4},  {11, 8, 4}, {9, 8, 5}, {12, 8, 5},
            {9, 8, 6},  {11, 8, 6}};

        std::vector<real> psi = {
            0.40365385103120377, 0.2036538510312047,  0.23321186012346895,
            0.03321186012346988, 0.982242233119266,   0.7822422331192658,
            0.23321186012346895, 0.03321186012346988, 0.40365385103120377,
            0.2036538510312047,  0.603337045290423,   0.4033370452904239,
            0.8108953715480816,  0.6108953715480814,  0.6020008006406419,
            0.4020008006406406,  0.8108953715480816,  0.6108953715480814,
            0.603337045290423,   0.4033370452904239,  0.3931111964292744,
            0.1931111964292742,  0.12175092878699778, 0.9217509287869996,
            0.3931111964292744,  0.1931111964292742};

        auto rx = g.Rx();

        for (int i = 0; auto&& c : rx) {
            auto [x, y, z] = exact[i];
            auto [cx, cy, cz] = c.position;
            REQUIRE(cx == Catch::Approx(x));
            REQUIRE(cy == Catch::Approx(y));
            REQUIRE(cz == Catch::Approx(z));

            REQUIRE(c.psi == Catch::Approx(psi[i]));

            REQUIRE(c.solid_coord == sc[i]);
            i++;
        }

        std::vector<int3> sx = {
            {10, 6, 3}, {9, 6, 4},  {10, 6, 4}, {11, 6, 4}, {8, 6, 5},  {9, 6, 5},
            {10, 6, 5}, {11, 6, 5}, {12, 6, 5}, {9, 6, 6},  {10, 6, 6}, {11, 6, 6},
            {10, 6, 7}, {9, 7, 3},  {10, 7, 3}, {11, 7, 3}, {8, 7, 4},  {9, 7, 4},
            {10, 7, 4}, {11, 7, 4}, {12, 7, 4}, {8, 7, 5},  {9, 7, 5},  {10, 7, 5},
            {11, 7, 5}, {12, 7, 5}, {8, 7, 6},  {9, 7, 6},  {10, 7, 6}, {11, 7, 6},
            {12, 7, 6}, {9, 7, 7},  {10, 7, 7}, {11, 7, 7}, {9, 8, 4},  {10, 8, 4},
            {11, 8, 4}, {9, 8, 5},  {10, 8, 5}, {11, 8, 5}, {12, 8, 5}, {9, 8, 6},
            {10, 8, 6}, {11, 8, 6}};

        for (int i = 0; auto&& s : g.Sx()) {
            REQUIRE(s == sx[i]);
            ++i;
        }
    }

    SECTION("y")
    {
        std::vector<real3> exact = {
            {-0.2000000000000000, -0.1016515138991168, 0.4000000000000000},
            {-0.2000000000000000, 0.08165151389911680, 0.4000000000000000},
            {-0.2000000000000000, -0.1456465996625054, 0.5000000000000000},
            {-0.2000000000000000, 0.1256465996625054, 0.5000000000000000},
            {-0.2000000000000000, -0.1016515138991168, 0.6000000000000000},
            {-0.2000000000000000, 0.08165151389911680, 0.6000000000000000},
            {-0.1000000000000000, -0.1119803902718557, 0.3000000000000000},
            {-0.1000000000000000, 0.09198039027185570, 0.3000000000000000},
            {-0.1000000000000000, -0.2109975124224178, 0.4000000000000000},
            {-0.1000000000000000, 0.1909975124224178, 0.4000000000000000},
            {-0.1000000000000000, -0.2344994432064365, 0.5000000000000000},
            {-0.1000000000000000, 0.2144994432064365, 0.5000000000000000},
            {-0.1000000000000000, -0.2109975124224178, 0.6000000000000000},
            {-0.1000000000000000, 0.1909975124224178, 0.6000000000000000},
            {-0.1000000000000000, -0.1119803902718557, 0.7000000000000000},
            {-0.1000000000000000, 0.09198039027185570, 0.7000000000000000},
            {0, -0.1596662954709577, 0.3000000000000000},
            {0, 0.1396662954709577, 0.3000000000000000},
            {0, -0.2389104628451919, 0.4000000000000000},
            {0, 0.2189104628451919, 0.4000000000000000},
            {0, -0.2597999199359359, 0.5000000000000000},
            {0, 0.2397999199359359, 0.5000000000000000},
            {0, -0.2389104628451919, 0.6000000000000000},
            {0, 0.2189104628451919, 0.6000000000000000},
            {0, -0.1596662954709577, 0.7000000000000000},
            {0, 0.1396662954709577, 0.7000000000000000},
            {0.1000000000000000, -0.1300000000000000, 0.3000000000000000},
            {0.1000000000000000, 0.1100000000000000, 0.3000000000000000},
            {0.1000000000000000, -0.2207130750570548, 0.4000000000000000},
            {0.1000000000000000, 0.2007130750570548, 0.4000000000000000},
            {0.1000000000000000, -0.2432380757938120, 0.5000000000000000},
            {0.1000000000000000, 0.2232380757938120, 0.5000000000000000},
            {0.1000000000000000, -0.2207130750570548, 0.6000000000000000},
            {0.1000000000000000, 0.2007130750570548, 0.6000000000000000},
            {0.1000000000000000, -0.1300000000000000, 0.7000000000000000},
            {0.1000000000000000, 0.1100000000000000, 0.7000000000000000},
            {0.2000000000000000, -0.1380624847486570, 0.4000000000000000},
            {0.2000000000000000, 0.1180624847486570, 0.4000000000000000},
            {0.2000000000000000, -0.1724807680927192, 0.5000000000000000},
            {0.2000000000000000, 0.1524807680927192, 0.5000000000000000},
            {0.2000000000000000, -0.1380624847486570, 0.6000000000000000},
            {0.2000000000000000, 0.1180624847486570, 0.6000000000000000}};

        std::vector<int3> sc = {
            {8, 7, 4},  {8, 7, 4},  {8, 6, 5},  {8, 7, 5},  {8, 7, 6},  {8, 7, 6},
            {9, 7, 3},  {9, 7, 3},  {9, 6, 4},  {9, 8, 4},  {9, 6, 5},  {9, 8, 5},
            {9, 6, 6},  {9, 8, 6},  {9, 7, 7},  {9, 7, 7},  {10, 6, 3}, {10, 7, 3},
            {10, 6, 4}, {10, 8, 4}, {10, 6, 5}, {10, 8, 5}, {10, 6, 6}, {10, 8, 6},
            {10, 6, 7}, {10, 7, 7}, {11, 7, 3}, {11, 7, 3}, {11, 6, 4}, {11, 8, 4},
            {11, 6, 5}, {11, 8, 5}, {11, 6, 6}, {11, 8, 6}, {11, 7, 7}, {11, 7, 7},
            {12, 7, 4}, {12, 7, 4}, {12, 6, 5}, {12, 8, 5}, {12, 7, 6}, {12, 7, 6}};

        std::vector<real> psi = {0.2884394027061823,
                                 0.42843940270618086,
                                 0.9804738023624631,
                                 0.12047380236246208,
                                 0.2884394027061823,
                                 0.42843940270618086,
                                 0.2161372680970105,
                                 0.35613726809700985,
                                 0.5230174130430751,
                                 0.6630174130430753,
                                 0.3585038975549447,
                                 0.4985038975549456,
                                 0.5230174130430751,
                                 0.6630174130430753,
                                 0.2161372680970105,
                                 0.35613726809700985,
                                 0.8823359317032969,
                                 0.022335931703295175,
                                 0.32762676008365654,
                                 0.46762676008365744,
                                 0.18140056044844877,
                                 0.3214005604484489,
                                 0.32762676008365654,
                                 0.46762676008365744,
                                 0.8823359317032969,
                                 0.022335931703295175,
                                 0.09,
                                 0.23,
                                 0.4550084746006168,
                                 0.5950084746006177,
                                 0.2973334694433162,
                                 0.4373334694433171,
                                 0.4550084746006168,
                                 0.5950084746006177,
                                 0.09,
                                 0.23,
                                 0.033562606759402036,
                                 0.17356260675939983,
                                 0.7926346233509657,
                                 0.9326346233509666,
                                 0.033562606759402036,
                                 0.17356260675939983};

        auto ry = g.Ry();

        for (int i = 0; auto&& c : ry) {
            auto [x, y, z] = exact[i];
            auto [cx, cy, cz] = c.position;
            REQUIRE(cx == Catch::Approx(x));
            REQUIRE(cy == Catch::Approx(y));
            REQUIRE(cz == Catch::Approx(z));
            REQUIRE(c.psi == Catch::Approx(psi[i]));
            REQUIRE(c.solid_coord == sc[i]);
            i++;
        }

        std::vector<int3> sy = {
            {8, 7, 4},  {8, 6, 5},  {8, 7, 5},  {8, 7, 6},  {9, 7, 3},  {9, 6, 4},
            {9, 7, 4},  {9, 8, 4},  {9, 6, 5},  {9, 7, 5},  {9, 8, 5},  {9, 6, 6},
            {9, 7, 6},  {9, 8, 6},  {9, 7, 7},  {10, 6, 3}, {10, 7, 3}, {10, 6, 4},
            {10, 7, 4}, {10, 8, 4}, {10, 6, 5}, {10, 7, 5}, {10, 8, 5}, {10, 6, 6},
            {10, 7, 6}, {10, 8, 6}, {10, 6, 7}, {10, 7, 7}, {11, 7, 3}, {11, 6, 4},
            {11, 7, 4}, {11, 8, 4}, {11, 6, 5}, {11, 7, 5}, {11, 8, 5}, {11, 6, 6},
            {11, 7, 6}, {11, 8, 6}, {11, 7, 7}, {12, 7, 4}, {12, 6, 5}, {12, 7, 5},
            {12, 8, 5}, {12, 7, 6}};

        for (int n = 0; auto&& s : g.Sy()) {
            REQUIRE(s == sy[n]);
            n++;
        }
    }

    SECTION("z")
    {
        std::vector<real3> exact = {
            {-0.2000000000000000, -0.1428571428571429, 0.4726325084847600},
            {-0.2000000000000000, -0.1428571428571429, 0.5273674915152400},
            {-0.2000000000000000, 0, 0.3647225074153132},
            {-0.2000000000000000, 0, 0.6352774925846868},
            {-0.1000000000000000, -0.1428571428571429, 0.3190332085938507},
            {-0.1000000000000000, -0.1428571428571429, 0.6809667914061493},
            {-0.1000000000000000, 0, 0.2757233850799420},
            {-0.1000000000000000, 0, 0.7242766149200580},
            {-0.1000000000000000, 0.1428571428571429, 0.3355776965325232},
            {-0.1000000000000000, 0.1428571428571429, 0.6644223034674768},
            {0, -0.1428571428571429, 0.2884604538346630},
            {0, -0.1428571428571429, 0.7115395461653370},
            {0, 0, 0.2504003205130263},
            {0, 0, 0.7495996794869737},
            {0, 0.1428571428571429, 0.3024280033062605},
            {0, 0.1428571428571429, 0.6975719966937395},
            {0.1000000000000000, -0.1428571428571429, 0.3082997663229470},
            {0.1000000000000000, -0.1428571428571429, 0.6917002336770530},
            {0.1000000000000000, 0, 0.2669763960453791},
            {0.1000000000000000, 0, 0.7330236039546209},
            {0.1000000000000000, 0.1428571428571429, 0.3238333349423024},
            {0.1000000000000000, 0.1428571428571429, 0.6761666650576976},
            {0.2000000000000000, -0.1428571428571429, 0.4064640198007380},
            {0.2000000000000000, -0.1428571428571429, 0.5935359801992620},
            {0.2000000000000000, 0, 0.3378272525977315},
            {0.2000000000000000, 0, 0.6621727474022685},
            {0.2000000000000000, 0.1428571428571429, 0.4449119443295462},
            {0.2000000000000000, 0.1428571428571429, 0.5550880556704538}};

        std::vector<int3> sc = {
            {8, 6, 5},  {8, 6, 5},  {8, 7, 4},  {8, 7, 6},  {9, 6, 4},  {9, 6, 6},
            {9, 7, 3},  {9, 7, 7},  {9, 8, 4},  {9, 8, 6},  {10, 6, 3}, {10, 6, 7},
            {10, 7, 3}, {10, 7, 7}, {10, 8, 4}, {10, 8, 6}, {11, 6, 4}, {11, 6, 6},
            {11, 7, 3}, {11, 7, 7}, {11, 8, 4}, {11, 8, 6}, {12, 6, 5}, {12, 6, 5},
            {12, 7, 4}, {12, 7, 6}, {12, 8, 5}, {12, 8, 5}};

        std::vector<real> psi = {
            0.7263250848475999,   0.7263250848475999,  0.6472250741531321,
            0.6472250741531316,   0.1903320859385077,  0.19033208593850715,
            0.7572338507994197,   0.7572338507994203,  0.3557769653252324,
            0.35577696532523184,  0.88460453834663,    0.8846045383466306,
            0.5040032051302629,   0.5040032051302634,  0.024280033062604733,
            0.024280033062604733, 0.08299766322946989, 0.08299766322946933,
            0.6697639604537914,   0.6697639604537919,  0.23833334942302387,
            0.2383333494230233,   0.06464019800737963, 0.06464019800737963,
            0.37827252597731453,  0.3782725259773134,  0.4491194432954615,
            0.4491194432954615};

        auto rz = g.Rz(0);

        for (int i = 0; auto&& c : rz) {
            auto [x, y, z] = exact[i];
            auto [cx, cy, cz] = c.position;
            REQUIRE(cx == Catch::Approx(x));
            REQUIRE(cy == Catch::Approx(y));
            REQUIRE(cz == Catch::Approx(z));
            REQUIRE(c.psi == Catch::Approx(psi[i]));
            REQUIRE(c.solid_coord == sc[i]);
            i++;
        }

        std::vector<int3> sz = {
            {8, 6, 5},  {8, 7, 4},  {8, 7, 5},  {8, 7, 6},  {9, 6, 4},  {9, 6, 5},
            {9, 6, 6},  {9, 7, 3},  {9, 7, 4},  {9, 7, 5},  {9, 7, 6},  {9, 7, 7},
            {9, 8, 4},  {9, 8, 5},  {9, 8, 6},  {10, 6, 3}, {10, 6, 4}, {10, 6, 5},
            {10, 6, 6}, {10, 6, 7}, {10, 7, 3}, {10, 7, 4}, {10, 7, 5}, {10, 7, 6},
            {10, 7, 7}, {10, 8, 4}, {10, 8, 5}, {10, 8, 6}, {11, 6, 4}, {11, 6, 5},
            {11, 6, 6}, {11, 7, 3}, {11, 7, 4}, {11, 7, 5}, {11, 7, 6}, {11, 7, 7},
            {11, 8, 4}, {11, 8, 5}, {11, 8, 6}, {12, 6, 5}, {12, 7, 4}, {12, 7, 5},
            {12, 7, 6}, {12, 8, 5}};

        for (int n = 0; auto&& s : g.Sz()) {
            REQUIRE(s == sz[n]);
            n++;
        }
    }
}

TEST_CASE("rect_intersections")
{
    sol::state lua;
    lua.open_libraries(sol::lib::base, sol::lib::math);
    lua.script(R"(
            loc = 1.0 - 1e-6
            simulation = {
                mesh = {
                    index_extents = {11, 2},
                    domain_bounds = {1, 1, 1}
                },
                shapes = {
                    {
                        type = "yz_rect",
                        lower_corner = {loc, -1, -1},
                        upper_corner = {loc, 2, 2},
                        normal = -1
                    }
                }
            }
        )");

    auto shapes_opt = object_geometry::from_lua(lua["simulation"]);
    REQUIRE(!!shapes_opt);
    const auto& shapes = *shapes_opt;

    auto m_opt = cartesian::from_lua(lua["simulation"]);
    REQUIRE(!!m_opt);
    auto&& [n, domain] = *m_opt;

    auto m = cartesian(n.extents, domain.min, domain.max);
    REQUIRE(m.dims() == 2);

    auto g = object_geometry(shapes, m);
    REQUIRE(g.Rx().size() == 2u);
    REQUIRE(g.Sx().size() == 2u);
}
